# -*- coding: utf-8 -*-
"""train_RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yf6ctz0AxguaHfl__LLSCbTZ9vrF7728
"""

# import required packages
import tensorflow as tf
import numpy as np
import pandas as pd
from tensorflow import keras
from tensorflow.keras import datasets
from tensorflow.keras.models import Sequential
import matplotlib.pyplot as plt
import os
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import Dense, LSTM, Bidirectional, Conv1D, MaxPooling1D, Dropout

from sklearn.model_selection import train_test_split

# YOUR IMPLEMENTATION
# Thoroughly comment your code to make it easy to follow
# getting new data frame with lookback into 3 previous days 

def stock_values(stock_data):
  # define new names to the columns
  names = []
  for p in range(1,4):  # lookback of 3 days
    names += [f+'(t-{})'.format(j) for f in features]

   # adding target column to the dataframe
  names.append('target(t)')
  
  # new dataframe with the above column names
  df_new = pd.DataFrame(columns= names, index= dates[:len(stock_data)-3])
  
  for p in range(len(stock_data)-3):
    cols = []
    for p in range(1,4):    # getting features from each day
      for f in features:
        cols.append(stock_data[f][q+p])
    # target variable as open price
    cols.append(stock_data['Open'][q])
    df_new.loc[dates[q]]= cols
  return(df_new)

# calculate Root Mean Square of the data 
def RMSE(actual, pred):
  error = 0
  for q in range(len(actual)):
    diff = (actual[q] - pred[q])**2
    error += diff
  error = tf.math.sqrt(error/len(actual))
  return error

def main():
    
stock_data = pd.read_csv(os.path.join('q2_dataset.csv'))
dates = stock_data['Date']

	#  4 features extration from the data "volume, open, low and High"
features = [' Volume', ' Open', ' High', ' Low']

	# generating the colums for the extracted data
cols = ['Date',' Volume', ' Open', ' High', ' Low']
stock_data = stock_data[cols]

	# getting the data inti csv file
stock_data_csv = stock_values(stock_data)

	# Data splitting
train, test = train_test_split(stock_data_csv, test_size = 0.3, random_state = 42)

	# saving train data
train.to_csv(os.path.join("train_data_RNN.csv"))
test.to_csv(os.path.join("test_data_RNN.csv"))

#Loading the generated data

# reading train data
train_data = pd.read_csv('train_data_RNN.csv')
col_names = train_data.columns[1:-1]
X = train_data[col_names].values
y = np.ravel(train_data['target(t)'])
y = y.reshape(y.shape[0],1)


# Split the data into training and validation
X_train, X_val, y_train, y_val = train_test_split(X,y, test_size = 0.2, random_state = 42)


# Data Preprocessing
from sklearn.preprocessing import MinMaxScaler
new_data_scale1 = MinMaxScaler()
new_data_scale2 = MinMaxScaler()

# normalising the data
X_norm_train = new_data_scale1.fit_transform(X_train)
y_norm_train = new_data_scale2.fit_transform(y_train)
X_norm_val = new_data_scale1.transform(X_val)
y_norm_val = new_data_scale2.transform(y_val)
X_norm_train = X_norm_train.reshape(X_norm_train.shape[0],3,4)
X_norm_val = X_norm_val.reshape(X_norm_val.shape[0], 3, 4)

#TRAINING THE MODEL USING LSTM layers
model1 = Sequential()
model1.add(LSTM(units=50, input_shape = (X_norm_train.shape[1],X_norm_train.shape[2]) ))
model1.add(Dense(1))
model1.compile(optimizer='adam', loss='mean_squared_error')


# Fit and predicting on the trained model
history = model1.fit(X_norm_train, y_norm_train, epochs=300, batch_size=10, validation_data = (X_norm_val, y_norm_val), verbose=1)
y_pred_train = model1.predict(X_norm_train)
y_pred_val = model1.predict(X_norm_val)

#Applying inverse transform on the predicted value
y_pred_train = new_data_scale2.inverse_transform(y_pred_train)
y_pred_val = new_data_scale2.inverse_transform(y_pred_val)


#Generating the Root mean square error loss for training and validation data
print('training data RMSE_loss : {}'.format(RMSE(y_train, y_pred_train)))
print('validation data RMSE_loss : {}'.format(RMSE(y_val, y_pred_val)))

#saving the model
model1.save(os.path.join('models','20825009_RNN_model'))

if __name__ == "__main__":
    main()

